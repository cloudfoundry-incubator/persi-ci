#!/bin/bash -e

function finish {
  pkill ssh || true
}
trap finish EXIT

generate_nfs_vars() {
  source persi-ci/scripts/ci/bbl_get_bosh_env
  source bosh-env/set-env.sh
    cat << EOF > ${ROOT_DIR}/generated-vars/nfs-vars.yml
---
nfs-ldap-service-user: ${LDAP_SVC_USER}
nfs-ldap-service-password: ${LDAP_SVC_PASS}
nfs-ldap-host: ${LDAP_HOST}
nfs-ldap-port: ${LDAP_PORT}
nfs-ldap-proto: ${LDAP_PROTO}
nfs-ldap-fqdn: ${LDAP_USER_FQDN}

nfstestserver_static_ips: ${NFSTESTSERVER_STATIC_IP}
nfstestservertwo_static_ips: ${NFSTESTSERVER_TWO_STATIC_IP}
nfstestldapserver_static_ips: ${NFSTESTLDAPSERVER_STATIC_IP}
EOF
}

generate_efs_vars() {
  pushd "${ROOT_DIR}/director-state/${BBL_STATE_DIR}"
    if [ -z "${AWS_SECURITY_GROUP}" ]; then
      AWS_SECURITY_GROUP="$(bbl outputs | yq -r '.internal_security_group')"
    fi

    if [ -z "${AWS_SUBNET_ID}" ]; then
      AWS_SUBNET_ID="$(bbl outputs | yq -r '.subnet_id')"
    fi

    if [ -z "${AWS_AZ}" ]; then
      AWS_AZ="$(bbl outputs | yq -r '.az')"
    fi
  popd

    cat << EOF > ${ROOT_DIR}/generated-vars/efs-vars.yml
---
aws-access-key-id: ${AWS_ACCESS_KEY_ID}
aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY}
aws-subnet-ids: ${AWS_SUBNET_ID}
aws-security-groups: ${AWS_SECURITY_GROUP}
aws-azs: ${AWS_AZ}
EOF
}

generate_ecs_vars() {
    cat << EOF > ${ROOT_DIR}/generated-vars/ecs-vars.yml
---
ecs-password: ${ECS_PASSWORD}
ecs-username: ${ECS_USERNAME}
ecs-ip: ${ECS_IP}
ecs-aws-id: ${ECS_AWS_ID}
ecs-aws-key: ${ECS_AWS_KEY}
EOF
}

generate_gcs_blobstore_vars() {
  pushd "${ROOT_DIR}/director-state/${BBL_STATE_DIR}"
    if [ -z "${GCS_BLOBSTORE_PROJECT_ID}" ]; then
      GCS_BLOBSTORE_PROJECT_ID="$(bbl outputs | yq -r '.gcs_blobstore_service_account_project')"
    fi

    if [ -z "${GCS_BLOBSTORE_SERVICE_ACCOUNT_EMAIL}" ]; then
      GCS_BLOBSTORE_SERVICE_ACCOUNT_EMAIL="$(bbl outputs | yq -r '.gcs_blobstore_service_account_email')"
    fi

    if [ -z "${GCS_BLOBSTORE_SERVICE_ACCOUNT_KEY}" ]; then
      GCS_BLOBSTORE_SERVICE_ACCOUNT_KEY="$(bbl outputs | yq '.gcs_blobstore_service_account_key')"
    fi

    if [ -z "${APP_PACKAGE_DIRECTORY_KEY}" ]; then
      APP_PACKAGE_DIRECTORY_KEY="$(bbl outputs | yq -r '.gcs_blobstore_packages_bucket')"
    fi

    if [ -z "${BUILDPACK_DIRECTORY_KEY}" ]; then
      BUILDPACK_DIRECTORY_KEY="$(bbl outputs | yq -r '.gcs_blobstore_buildpacks_bucket')"
    fi

    if [ -z "${DROPLET_DIRECTORY_KEY}" ]; then
      DROPLET_DIRECTORY_KEY="$(bbl outputs | yq -r '.gcs_blobstore_droplets_bucket')"
    fi

    if [ -z "${RESOURCE_DIRECTORY_KEY}" ]; then
      RESOURCE_DIRECTORY_KEY="$(bbl outputs | yq -r '.gcs_blobstore_resources_bucket')"
    fi
  popd

    cat << EOF > ${ROOT_DIR}/generated-vars/gcs-blobstore-vars.yml
---
gcs_project: ${GCS_BLOBSTORE_PROJECT_ID}
gcs_service_account_email: ${GCS_BLOBSTORE_SERVICE_ACCOUNT_EMAIL}
gcs_service_account_json_key: ${GCS_BLOBSTORE_SERVICE_ACCOUNT_KEY}

app_package_directory_key: ${APP_PACKAGE_DIRECTORY_KEY}
buildpack_directory_key: ${BUILDPACK_DIRECTORY_KEY}
droplet_directory_key: ${DROPLET_DIRECTORY_KEY}
resource_directory_key: ${RESOURCE_DIRECTORY_KEY}
EOF
}

generate_s3_blobstore_vars() {
  pushd "${ROOT_DIR}/director-state/${BBL_STATE_DIR}"
    if [ -z "${S3_BLOBSTORE_ID}" ]; then
      S3_BLOBSTORE_ID="$(bbl outputs | yq -r '.s3_blobstore_access_key_id')"
    fi

    if [ -z "${S3_BLOBSTORE_KEY}" ]; then
      S3_BLOBSTORE_KEY="$(bbl outputs | yq -r '.s3_blobstore_secret_access_key')"
    fi

    if [ -z "${S3_BLOBSTORE_REGION}" ]; then
      S3_BLOBSTORE_REGION="$(bbl outputs | yq -r '.region')"
    fi

    if [ -z "${APP_PACKAGE_DIRECTORY_KEY}" ]; then
      APP_PACKAGE_DIRECTORY_KEY="$(bbl outputs | yq -r '.s3_blobstore_packages_bucket')"
    fi

    if [ -z "${BUILDPACK_DIRECTORY_KEY}" ]; then
      BUILDPACK_DIRECTORY_KEY="$(bbl outputs | yq -r '.s3_blobstore_buildpacks_bucket')"
    fi

    if [ -z "${DROPLET_DIRECTORY_KEY}" ]; then
      DROPLET_DIRECTORY_KEY="$(bbl outputs | yq -r '.s3_blobstore_droplets_bucket')"
    fi

    if [ -z "${RESOURCE_DIRECTORY_KEY}" ]; then
      RESOURCE_DIRECTORY_KEY="$(bbl outputs | yq -r '.s3_blobstore_resources_bucket')"
    fi
  popd

    cat << EOF > ${ROOT_DIR}/generated-vars/s3-blobstore-vars.yml
---
blobstore_access_key_id: ${S3_BLOBSTORE_ID}
blobstore_secret_access_key: ${S3_BLOBSTORE_KEY}
aws_region: ${S3_BLOBSTORE_REGION}

app_package_directory_key: ${APP_PACKAGE_DIRECTORY_KEY}
buildpack_directory_key: ${BUILDPACK_DIRECTORY_KEY}
droplet_directory_key: ${DROPLET_DIRECTORY_KEY}
resource_directory_key: ${RESOURCE_DIRECTORY_KEY}
EOF
}

generate_datadog_vars() {
    cat << EOF > ${ROOT_DIR}/generated-vars/datadog-vars.yml
---
datadog_api_key: ${DATADOG_API_KEY}
datadog_metric_prefix: ${DATADOG_METRIC_PREFIX}
traffic_controller_external_port: 4443
EOF
}

generate_smb_vars() {
    cat << EOF > ${ROOT_DIR}/generated-vars/smb-vars.yml
---
smb-username: ${SMB_USERNAME}
smb-password: ${SMB_PASSWORD}
EOF
}

main() {
  ROOT_DIR="${1}"
  mkdir -p ${ROOT_DIR}/generated-vars

  apt-get install -y python3-pip
  pip3 install yq


  if [ "$GENERATE_NFS_VARS" = "true" ]; then
    generate_nfs_vars
  fi

  if [ "$GENERATE_EFS_VARS" = "true" ]; then
    generate_efs_vars
  fi

  if [ "$GENERATE_ECS_VARS" = "true" ]; then
    generate_ecs_vars
  fi

  if [ "$GENERATE_GCS_BLOBSTORE_VARS" = "true" ]; then
    generate_gcs_blobstore_vars
  fi

  if [ "$GENERATE_S3_BLOBSTORE_VARS" = "true" ]; then
    generate_s3_blobstore_vars
  fi

  if [ "$GENERATE_DATADOG_VARS" = "true" ]; then
    generate_datadog_vars
  fi

  if [ "$GENERATE_SMB_VARS" = "true" ]; then
    generate_smb_vars
  fi
}

main ${PWD}
